{
  "version": 3,
  "sources": ["../../src/scripts/theme/utils/init.js", "../../src/scripts/packs/sort.js"],
  "sourcesContent": ["// This script establishes a MutationObserver to detect changes in the DOM and run callbacks when changes are detected.\n// It tries to be efficient about this by establishing only one obeserver and running all callbacks once on each new node.\n// There is a limitation of this mechanism: if a node contains a script that has not before been added to the dom,\n// and it calls onDomChange, its callback won't be run against anything until the next mutation.\n// To work around this, ensure the script is loaded in the initial page load or a previous fetch.\n\nwindow.StoreConnect = window.StoreConnect || {}\nwindow.StoreConnect.ObserverCallbacks = window.StoreConnect.ObserverCallbacks || []\n\ndocument.addEventListener('DOMContentLoaded', establishObserver)\n\nexport function onDomChange(initCallback) {\n  window.StoreConnect.ObserverCallbacks.push(initCallback)\n}\n\nfunction establishObserver() {\n  if (window.StoreConnect.Observer) return\n\n  window.StoreConnect.Observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          runCallbacks(node, 'mutation')\n        }\n      })\n    })\n  })\n\n  window.StoreConnect.Observer.observe(document.body, { childList: true, subtree: true })\n\n  runCallbacks(document, 'initial load')\n}\n\nfunction runCallbacks(node, _context) {\n  window.StoreConnect.ObserverCallbacks.forEach((callback) => callback(node))\n}\n", "import { onDomChange } from '../theme/utils/init'\n\nwindow.StoreConnectUI = window.StoreConnectUI || {}\n\nwindow.StoreConnectUI.Sort = (function () {\n  onDomChange(init)\n\n  function init(node) {\n    const input = node.querySelector('form[data-filters] input[name=sort]')\n\n    if (input) {\n      document\n        .querySelector(`[data-sort] input[name=sort][value='${input.value}']`)\n        ?.setAttribute('checked', true)\n    }\n  }\n\n  return {\n    update: (id) => {\n      document.querySelector('form[data-filters] input[name=sort]').value = id\n      document.querySelector('form[data-filters]').submit()\n    },\n  }\n})()\n"],
  "mappings": ";;AAMA,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,SAAO,aAAa,oBAAoB,OAAO,aAAa,qBAAqB,CAAC;AAElF,WAAS,iBAAiB,oBAAoB,iBAAiB;AAExD,WAAS,YAAY,cAAc;AACxC,WAAO,aAAa,kBAAkB,KAAK,YAAY;AAAA,EACzD;AAEA,WAAS,oBAAoB;AAC3B,QAAI,OAAO,aAAa,SAAU;AAElC,WAAO,aAAa,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACjE,gBAAU,QAAQ,CAAC,aAAa;AAC9B,iBAAS,WAAW,QAAQ,CAAC,SAAS;AACpC,cAAI,KAAK,aAAa,KAAK,cAAc;AACvC,yBAAa,MAAM,UAAU;AAAA,UAC/B;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,WAAO,aAAa,SAAS,QAAQ,SAAS,MAAM,EAAE,WAAW,MAAM,SAAS,KAAK,CAAC;AAEtF,iBAAa,UAAU,cAAc;AAAA,EACvC;AAEA,WAAS,aAAa,MAAM,UAAU;AACpC,WAAO,aAAa,kBAAkB,QAAQ,CAAC,aAAa,SAAS,IAAI,CAAC;AAAA,EAC5E;;;ACjCA,SAAO,iBAAiB,OAAO,kBAAkB,CAAC;AAElD,SAAO,eAAe,OAAQ,WAAY;AACxC,gBAAY,IAAI;AAEhB,aAAS,KAAK,MAAM;AAClB,YAAM,QAAQ,KAAK,cAAc,qCAAqC;AAEtE,UAAI,OAAO;AACT,iBACG,cAAc,uCAAuC,MAAM,KAAK,IAAI,GACnE,aAAa,WAAW,IAAI;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,MACL,QAAQ,CAAC,OAAO;AACd,iBAAS,cAAc,qCAAqC,EAAE,QAAQ;AACtE,iBAAS,cAAc,oBAAoB,EAAE,OAAO;AAAA,MACtD;AAAA,IACF;AAAA,EACF,EAAG;",
  "names": []
}
