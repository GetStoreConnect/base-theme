{
  "version": 3,
  "sources": ["../../node_modules/hammerjs/hammer.js", "../../src/scripts/packs/product-gallery.js"],
  "sourcesContent": ["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n", "import 'hammerjs'\n\nwindow.StoreConnectUI = window.StoreConnectUI || {}\n\nwindow.StoreConnectUI.ProductGallery = (function () {\n  let isZoomed = false,\n    lastPosX = 0,\n    lastPosY = 0,\n    hammer\n\n  const drag = (e, styleProps) => {\n    const x = e.deltaX + lastPosX,\n      y = e.deltaY + lastPosY\n\n    // Release the drag\n    if (e.isFinal) {\n      e.target.classList.remove('is-dragging')\n      e.target.setAttribute('style', styleProps)\n      return\n    }\n\n    // Move image position with cursor/touch position\n    e.target.classList.add('is-dragging')\n    e.target.setAttribute(\n      'style',\n      'transition: none;' +\n        'transform: translateX(calc(-50% + ' +\n        x +\n        'px)) translateY(calc(-50% + ' +\n        y +\n        'px));'\n    )\n  }\n\n  function init(imageUrl) {\n    const image = document.querySelector('[data-product-gallery-image]')\n    const closeButton = document.querySelector('[data-product-gallery-close]')\n    const viewportProps = document.querySelector('meta[name=viewport]').getAttribute('content')\n\n    hammer = new Hammer(image)\n\n    // Show the gallery modal and disable scrolling and viewport zooming\n    document.querySelector('[data-product-gallery]').classList.add('is-active')\n    document.querySelector('body').classList.add('is-not-scrollable')\n    document\n      .querySelector('meta[name=viewport]')\n      .setAttribute('content', `${viewportProps}, user-scalable=0`)\n    // Load the 'huge' image size\n    image.setAttribute('src', imageUrl)\n    // The modal can be closed by swiping down or clicking the close button\n    closeButton.addEventListener('click', close)\n    // Toggle zoom mode on click\n    image.addEventListener('click', toggleZoom)\n  }\n\n  function close() {\n    // Reset zoom, close the gallery modal, and restore <body> scrolling\n    exitZoom()\n    document.querySelector('[data-product-gallery]').classList.remove('is-active')\n    document.querySelector('body').classList.remove('is-not-scrollable')\n  }\n\n  function enterZoom() {\n    const image = document.querySelector('[data-product-gallery-image'),\n      imageStyleProps = image.getAttribute('style')\n\n    isZoomed = true\n    hammer.on('pan', (e) => drag(e, imageStyleProps))\n    image.classList.add('is-zoomed')\n  }\n\n  function exitZoom() {\n    isZoomed = false\n    hammer.off('pan')\n    document.querySelector('[data-product-gallery-image').classList.remove('is-zoomed')\n  }\n\n  function toggleZoom() {\n    isZoomed ? exitZoom() : enterZoom()\n  }\n\n  return {\n    init: (imageUrl) => init(imageUrl),\n  }\n})()\n"],
  "mappings": "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",
  "names": ["window", "document", "assign", "extend", "merge", "self", "Hammer"]
}
