{
  "version": 3,
  "sources": ["../../src/scripts/theme/utils/init.js", "../../src/scripts/packs/checkout-helpers.js"],
  "sourcesContent": ["// This script establishes a MutationObserver to detect changes in the DOM and run callbacks when changes are detected.\n// It tries to be efficient about this by establishing only one obeserver and running all callbacks once on each new node.\n// There is a limitation of this mechanism: if a node contains a script that has not before been added to the dom,\n// and it calls onDomChange, its callback won't be run against anything until the next mutation.\n// To work around this, ensure the script is loaded in the initial page load or a previous fetch.\n\nwindow.StoreConnect = window.StoreConnect || {}\nwindow.StoreConnect.ObserverCallbacks = window.StoreConnect.ObserverCallbacks || []\n\ndocument.addEventListener('DOMContentLoaded', establishObserver)\n\nexport function onDomChange(initCallback) {\n  window.StoreConnect.ObserverCallbacks.push(initCallback)\n}\n\nfunction establishObserver() {\n  if (window.StoreConnect.Observer) return\n\n  window.StoreConnect.Observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          runCallbacks(node, 'mutation')\n        }\n      })\n    })\n  })\n\n  window.StoreConnect.Observer.observe(document.body, { childList: true, subtree: true })\n\n  runCallbacks(document, 'initial load')\n}\n\nfunction runCallbacks(node, _context) {\n  window.StoreConnect.ObserverCallbacks.forEach((callback) => callback(node))\n}\n", "import { onDomChange } from '../theme/utils/init'\n\nonDomChange(init)\n\nfunction init(node) {\n  const billingForm = node.querySelector('[data-billing-form]')\n  const billingCheckbox = node.querySelector('[data-billing-checkbox] input[type=checkbox]')\n\n  if (!billingForm || !billingCheckbox) {\n    return\n  }\n\n  if (billingCheckbox.checked) {\n    // remove required attribute from all inputs\n    billingForm.querySelectorAll('input, select').forEach((input) => {\n      input.removeAttribute('required')\n    })\n  } else {\n    // add required attribute to all inputs if it is contained in a div with the class \"required\"\n    billingForm.querySelectorAll('.required input, .required select').forEach((input) => {\n      input.setAttribute('required', '')\n    })\n  }\n\n  billingCheckbox.addEventListener('change', function () {\n    billingForm.classList.toggle('is-hidden')\n  })\n}\n"],
  "mappings": ";;AAMA,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,SAAO,aAAa,oBAAoB,OAAO,aAAa,qBAAqB,CAAC;AAElF,WAAS,iBAAiB,oBAAoB,iBAAiB;AAExD,WAAS,YAAY,cAAc;AACxC,WAAO,aAAa,kBAAkB,KAAK,YAAY;AAAA,EACzD;AAEA,WAAS,oBAAoB;AAC3B,QAAI,OAAO,aAAa,SAAU;AAElC,WAAO,aAAa,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACjE,gBAAU,QAAQ,CAAC,aAAa;AAC9B,iBAAS,WAAW,QAAQ,CAAC,SAAS;AACpC,cAAI,KAAK,aAAa,KAAK,cAAc;AACvC,yBAAa,MAAM,UAAU;AAAA,UAC/B;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,WAAO,aAAa,SAAS,QAAQ,SAAS,MAAM,EAAE,WAAW,MAAM,SAAS,KAAK,CAAC;AAEtF,iBAAa,UAAU,cAAc;AAAA,EACvC;AAEA,WAAS,aAAa,MAAM,UAAU;AACpC,WAAO,aAAa,kBAAkB,QAAQ,CAAC,aAAa,SAAS,IAAI,CAAC;AAAA,EAC5E;;;ACjCA,cAAY,IAAI;AAEhB,WAAS,KAAK,MAAM;AAClB,UAAM,cAAc,KAAK,cAAc,qBAAqB;AAC5D,UAAM,kBAAkB,KAAK,cAAc,8CAA8C;AAEzF,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC;AAAA,IACF;AAEA,QAAI,gBAAgB,SAAS;AAE3B,kBAAY,iBAAiB,eAAe,EAAE,QAAQ,CAAC,UAAU;AAC/D,cAAM,gBAAgB,UAAU;AAAA,MAClC,CAAC;AAAA,IACH,OAAO;AAEL,kBAAY,iBAAiB,mCAAmC,EAAE,QAAQ,CAAC,UAAU;AACnF,cAAM,aAAa,YAAY,EAAE;AAAA,MACnC,CAAC;AAAA,IACH;AAEA,oBAAgB,iBAAiB,UAAU,WAAY;AACrD,kBAAY,UAAU,OAAO,WAAW;AAAA,IAC1C,CAAC;AAAA,EACH;",
  "names": []
}
