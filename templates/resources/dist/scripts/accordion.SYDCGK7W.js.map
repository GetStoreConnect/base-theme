{
  "version": 3,
  "sources": ["../../src/scripts/theme/utils/init.js", "../../src/scripts/packs/accordion.js"],
  "sourcesContent": ["// This script establishes a MutationObserver to detect changes in the DOM and run callbacks when changes are detected.\n// It tries to be efficient about this by establishing only one obeserver and running all callbacks once on each new node.\n// There is a limitation of this mechanism: if a node contains a script that has not before been added to the dom,\n// and it calls onDomChange, its callback won't be run against anything until the next mutation.\n// To work around this, ensure the script is loaded in the initial page load or a previous fetch.\n\nwindow.StoreConnect = window.StoreConnect || {}\nwindow.StoreConnect.ObserverCallbacks = window.StoreConnect.ObserverCallbacks || []\n\ndocument.addEventListener('DOMContentLoaded', establishObserver)\n\nexport function onDomChange(initCallback) {\n  window.StoreConnect.ObserverCallbacks.push(initCallback)\n}\n\nfunction establishObserver() {\n  if (window.StoreConnect.Observer) return\n\n  window.StoreConnect.Observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          runCallbacks(node, 'mutation')\n        }\n      })\n    })\n  })\n\n  window.StoreConnect.Observer.observe(document.body, { childList: true, subtree: true })\n\n  runCallbacks(document, 'initial load')\n}\n\nfunction runCallbacks(node, _context) {\n  window.StoreConnect.ObserverCallbacks.forEach((callback) => callback(node))\n}\n", "import { onDomChange } from '../theme/utils/init'\n\nonDomChange(init)\n\nfunction init(node) {\n  ;[...node.querySelectorAll('[data-accordion-trigger]')].forEach((trigger) => {\n    trigger.addEventListener('click', toggleActiveState)\n  })\n}\n\nfunction toggleActiveState(e) {\n  const parent = e.currentTarget.parentNode\n  const target = parent.querySelector('[data-accordion-target]')\n  const icons = parent.querySelectorAll('[data-accordion-icon]')\n\n  const isExpanded = target.getAttribute('aria-expanded') === 'true'\n  target.setAttribute('aria-expanded', isExpanded ? 'false' : 'true')\n\n  icons.forEach((icon) => icon.classList.toggle('is-active'))\n  parent.classList.toggle('is-active')\n  target.classList.toggle('is-expanded')\n}\n"],
  "mappings": ";;AAMA,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,SAAO,aAAa,oBAAoB,OAAO,aAAa,qBAAqB,CAAC;AAElF,WAAS,iBAAiB,oBAAoB,iBAAiB;AAExD,WAAS,YAAY,cAAc;AACxC,WAAO,aAAa,kBAAkB,KAAK,YAAY;AAAA,EACzD;AAEA,WAAS,oBAAoB;AAC3B,QAAI,OAAO,aAAa,SAAU;AAElC,WAAO,aAAa,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACjE,gBAAU,QAAQ,CAAC,aAAa;AAC9B,iBAAS,WAAW,QAAQ,CAAC,SAAS;AACpC,cAAI,KAAK,aAAa,KAAK,cAAc;AACvC,yBAAa,MAAM,UAAU;AAAA,UAC/B;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,WAAO,aAAa,SAAS,QAAQ,SAAS,MAAM,EAAE,WAAW,MAAM,SAAS,KAAK,CAAC;AAEtF,iBAAa,UAAU,cAAc;AAAA,EACvC;AAEA,WAAS,aAAa,MAAM,UAAU;AACpC,WAAO,aAAa,kBAAkB,QAAQ,CAAC,aAAa,SAAS,IAAI,CAAC;AAAA,EAC5E;;;ACjCA,cAAY,IAAI;AAEhB,WAAS,KAAK,MAAM;AAClB;AAAC,KAAC,GAAG,KAAK,iBAAiB,0BAA0B,CAAC,EAAE,QAAQ,CAAC,YAAY;AAC3E,cAAQ,iBAAiB,SAAS,iBAAiB;AAAA,IACrD,CAAC;AAAA,EACH;AAEA,WAAS,kBAAkB,GAAG;AAC5B,UAAM,SAAS,EAAE,cAAc;AAC/B,UAAM,SAAS,OAAO,cAAc,yBAAyB;AAC7D,UAAM,QAAQ,OAAO,iBAAiB,uBAAuB;AAE7D,UAAM,aAAa,OAAO,aAAa,eAAe,MAAM;AAC5D,WAAO,aAAa,iBAAiB,aAAa,UAAU,MAAM;AAElE,UAAM,QAAQ,CAAC,SAAS,KAAK,UAAU,OAAO,WAAW,CAAC;AAC1D,WAAO,UAAU,OAAO,WAAW;AACnC,WAAO,UAAU,OAAO,aAAa;AAAA,EACvC;",
  "names": []
}
