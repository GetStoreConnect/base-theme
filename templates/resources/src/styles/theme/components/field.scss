:root {
  --sc-input-height: 44px;
  --sc-input-border-radius: 8px;
}

$Field: (
  'height': var(--sc-input-height),
  'label': (
    'color': var(--sc-shade-dark),
    'size': #{var(--sc-font-small)},
  ),
  'error-label': (
    'color': var(--sc-color-error),
    'size': #{var(--sc-font-small)},
  ),
  'input': (
    'bg': (
      'resting': white,
      'focus': color('primary', $s: 20%, $l: 98%),
    ),
    'placeholder': (
      'resting': hsla(0, 0%, 0%, 0.5),
      'focus': hsla(0, 0%, 0%, 0.3),
    ),
  ),
  'special': (
    'icon': (
      'resting': hsla(0, 0%, 0%, 0.5),
      'focus': color('primary', $s: 60%, $l: 70%),
    ),
    'bg': (
      'resting': hsla(0, 0%, 97%, 1),
      'focus': color('primary', $s: 60%, $l: 96%),
    ),
    'placeholder': (
      'resting': hsla(0, 0%, 0%, 0.5),
      'focus': color('primary', $s: 60%, $l: 80%),
    ),
  ),
) !default;

@if (map-has-key($override, 'Field') == true) {
  $Field: map-extend($Field, map-get($override, 'Field'), true);
}

@function Field($keys...) {
  @return deep-map-get($Field, $keys...);
}

@mixin common-field-properties {
  padding: 0 spacing('medium');
  background-color: Field('input', 'bg', 'resting');
  border: none;
  box-shadow: inset 0 1px 2px hsla(0, 0%, 0%, 0.05);
  outline: 1px solid hsla(0, 0%, 85%, 1);
  border-radius: var(--sc-input-border-radius);
}

.SC-Field,
.Field {
  position: relative;
  margin-bottom: spacing('base');
  max-width: 500px;

  /**
   * Label
   */

  &_label {
    margin-bottom: spacing('tiny');
    color: Field('label', 'color');
    font-size: Field('label', 'size');

    // Explanation

    small {
      font-size: var(--sc-font-tiny);
      color: shade('neutral');
    }
  }

  &_error {
    display: none;
    margin-top: spacing('tiny');
    color: Field('error-label', 'color');
    font-size: Field('label', 'size');
  }

  &.has-error {
    .SC-Field_input,
    .SC-Field_select {
      border-color: var(--sc-color-error);
      background-color: hsl(var(--sc-color-error-h), var(--sc-color-error-s), 98%);
    }

    .SC-Field_error {
      display: block;
    }
  }

  &.required {
    .SC-Field_label::after {
      content: ' *';
    }
  }

  /**
   * Input
   */

  &_input {
    @include reset-input-styles;
    @include common-field-properties;
    position: relative;
    height: Field('height');
    transition:
      200ms border-color ease,
      200ms background-color ease;

    // Placeholder

    &::placeholder {
      transition: 200ms color ease;
      color: Field('input', 'placeholder', 'resting');
    }

    // State: Disabled

    &:disabled {
      background-color: hsla(0, 0%, 0%, 0.03);
      border-color: shade('lighter');
      color: shade('darkest');
    }

    // State: Focus

    &:focus {
      background-color: Field('input', 'bg', 'focus');
      outline-color: color('primary', $s: 71%, $l: 80%);
      box-shadow: 0 0 0 4px color('primary', $s: 71%, $l: 92%);

      &::placeholder {
        color: Field('input', 'placeholder', 'focus');
      }
    }

    // Error

    &.has-error {
      border-color: var(--sc-color-error);
      background-color: hsl(var(--sc-color-error-h), var(--sc-color-error-s), 98%);
    }
  }

  /**
   * Select
   */

  &_select {
    @include reset-input-styles;
    @include common-field-properties;
    width: 100%;
    max-width: 500px;
    background-image: url('theme/icons/chevron.svg');
    background-size: 10px;
    background-position-y: center;
    background-position-x: calc(100% - var(--sc-spacing-base));
    background-repeat: no-repeat;
    padding-right: var(--sc-spacing-xlarge);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);
    height: Field('height');

    &:focus {
      box-shadow: 0 0 0 4px color('primary', $s: 71%, $l: 92%);
      outline: 1px solid color('primary', $s: 71%, $l: 80%);
    }
  }

  /**
   * Textarea
   */

  &_textarea {
    @include common-field-properties;
    padding: var(--sc-spacing-medium);
    box-shadow: inset 0 1px 2px hsla(0, 0%, 0%, 0.1);

    &:focus {
      box-shadow: 0 0 0 4px color('primary', $s: 71%, $l: 92%);
      outline: 1px solid color('primary', $s: 71%, $l: 80%);
    }
  }

  /**
   * Hint
   */

  &_hint {
    margin-top: var(--sc-spacing-tiny);
    font-size: var(--sc-font-tiny);
    color: var(--sc-shade-neutral);
  }

  /**
   * Variant: Icon
   */

  &-icon {
    input {
      padding-left: 43px;
    }

    svg {
      position: absolute;
      left: 18px;
      top: 50%;
      width: 15px;
      height: 15px;
      transform: translateY(-50%);
      transition: 200ms fill ease;
      fill: currentColor;
    }
  }

  /**
   * Variant: Special
   */

  &-special {
    svg {
      color: Field('special', 'icon', 'resting');
    }

    input {
      background-color: Field('special', 'bg', 'resting');
      outline-color: transparent;
      box-shadow: none;
      max-width: 100%;

      // Placeholder

      &::placeholder {
        color: Field('special', 'placeholder', 'resting');
      }

      // State: Focus

      &:focus {
        background-color: Field('special', 'bg', 'focus');
        outline: transparent;
        box-shadow: none;

        &::placeholder {
          color: Field('special', 'placeholder', 'focus');
        }

        & ~ svg {
          fill: Field('special', 'icon', 'focus');
        }
      }
    }
  }

  /**
   * Variant: Inline
   */

  &-inline {
    display: flex;
    align-items: center;

    label {
      margin: 0 spacing('small') 0 0;
    }
  }

  /**
   * Variant: Expand (deprecated)
   */

  &-expand input {
    width: 100%;
  }

  /**
   * Bambora
   */

  &-bambora {
    iframe {
      position: absolute;
      top: 0;
      left: 0;
      margin: 0;
      height: Field('height');
      width: 100%;
    }

    .SC-Field_input,
    .Field_input {
      min-width: 100px;
    }
  }

  &-stripe {
    display: flex;
    align-items: center;
    min-width: 100px;

    & > div {
      width: 100%;
    }
  }
}

[data-required]:after {
  content: '*';
  display: inline-block;
}

/**
 * Errors
 */

.field_with_errors input,
.field_with_errors select {
  &:not(:focus) {
    border-color: color('error');
  }
}
