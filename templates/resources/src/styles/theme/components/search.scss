/**
 * DEPRECATED
 */

$Search: (
  'has_border': false,
  'has_icon': true,
  'width': 400px,
  'border': (
    'width': 1px,
    'color': (
      'resting':
        shade(
          $a: 0.1,
        ),
      'focus': shade('light'),
    ),
  ),
  'icon': (
    'size': 15px,
    'color':
      shade(
        $a: 0.6,
      ),
  ),
  'button': (
    'bg': color('primary'),
    'color': white,
    'padding': Button('padding'),
    'border': (
      'width': 0,
      'color': (
        'resting':
          shade(
            $a: 0.1,
          ),
        'hover': shade('light'),
      ),
    ),
  ),
) !default;

@if (map-has-key($override, 'Search') == true) {
  $Search: map-extend($Search, map-get($override, 'Search'), true);
}

@function Search($keys...) {
  @return deep-map-get($Search, $keys...);
}

.SC-Search,
.Search {
  position: relative;
  display: flex;
  width: 100%;
  margin: 0 auto;
  @include medium-and-up {
    max-width: Search('width');
  }

  /**
   * Input
   */

  input {
    @include reset-input-styles;
    width: 100%;
    height: 50px;
    background: shade($a: 0.1);
    border-radius: 3px;

    @if Search('has_icon') {
      padding: 0 spacing('medium') 0 spacing('xxlarge');
    } @else {
      padding: 0 spacing('medium');
    }

    @if Search('has_border') {
      border-style: solid;
      border-width: Search('border', 'width');
      @include set-state-prop('border-color', Search('border', 'color'));
    }

    // Truncate label unless focused

    &:not(:focus) {
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
    }
  }

  /**
   * Icon
   */

  &_icon {
    @if Search('has_icon') {
      position: absolute;
      transform: translateY(-50%);
      top: 50%;
      left: spacing('base');
      width: Search('icon', 'size');
      height: Search('icon', 'size');
      fill: Search('icon', 'color');
    }
  }

  /**
   * Button
   */

  &_button {
    @include reset-input-styles;

    display: flex;
    transition: 0.2s background ease;
    margin-left: spacing('tiny');
    border-radius: var(--sc-border-radius);
    @if Search('has_border') {
      border-width: Search('button', 'border', 'width');
      border-color: Search('button', 'border', 'color', 'resting');
      border-style: solid;
    }
    padding: Search('button', 'padding');
    background: Search('button', 'bg');
    align-items: center;
    color: Search('button', 'color');

    &:hover,
    &:focus {
      background: darken-color('primary', 15%);
      @if Search('has_border') {
        border-color: Search('button', 'border', 'color', 'hover');
      }
    }
  }
}
