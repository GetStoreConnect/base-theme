import { ValidatorRules, FieldContext, FieldData } from './types';
import { ValidationRuleResult } from './ValidationRuleResult';
declare class ValidationResult {
    private validationResults;
    constructor(results: ValidationRuleResult[]);
    /** Checks if all validation rules have passed */
    get isValid(): boolean;
    /** Checks if any validation rule returned an error */
    hasError(isValidatingForm?: boolean): boolean;
    /** Returns the first validation result that returned an error */
    getError(isValidatingForm?: boolean): ValidationRuleResult;
    /** Returns all validation results that returned an error */
    getAllErrors(): ValidationRuleResult[];
}
declare class Validator {
    rules: ValidatorRules;
    constructor(rules: any);
    setRules(newRules: any): void;
    /**
     * Get all validation rules for a field
     */
    private getRulesFor;
    /**
     * Validates a field
     */
    validate({ key, value, mode }: FieldData, context?: FieldContext): ValidationResult;
}
export default Validator;
