import { Component, h } from 'preact';
import UIElement from '../../../UIElement';
import { Order, OrderStatus } from '../../../../types';
interface PaymentMethodListProps {
    paymentMethods: UIElement[];
    activePaymentMethod?: UIElement;
    instantPaymentMethods?: UIElement[];
    /**
     * Map that keeps track of which Payment methods (UIElements) already got rendered in the UI
     */
    cachedPaymentMethods: Record<string, boolean>;
    order?: Order;
    orderStatus?: OrderStatus;
    openFirstStoredPaymentMethod?: boolean;
    openFirstPaymentMethod?: boolean;
    showRemovePaymentMethodButton?: boolean;
    onSelect?: (paymentMethod: UIElement) => void;
    onDisableStoredPaymentMethod?: (storedPaymentMethod: any) => void;
    onOrderCancel?: (order: any) => void;
    isDisablingPaymentMethod?: boolean;
    isLoading: boolean;
}
declare class PaymentMethodList extends Component<PaymentMethodListProps> {
    static defaultProps: PaymentMethodListProps;
    componentDidMount(): void;
    render({ paymentMethods, instantPaymentMethods, activePaymentMethod, cachedPaymentMethods, isLoading, isDisablingPaymentMethod }: {
        paymentMethods: any;
        instantPaymentMethods: any;
        activePaymentMethod: any;
        cachedPaymentMethods: any;
        isLoading: any;
        isDisablingPaymentMethod: any;
    }): h.JSX.Element;
}
export default PaymentMethodList;
