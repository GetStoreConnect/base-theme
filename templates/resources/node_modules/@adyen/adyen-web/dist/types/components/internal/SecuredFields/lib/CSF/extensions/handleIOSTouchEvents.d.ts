/**
 * Detect if touched element is an input or textArea.
 * - If it is do some quirky shit to set focus and caret position on this element
 * - Else do some quirky shit to make the iOS keyboard retract
 *
 * Always then remove this listener and set var saying we have done so (read in CSF...handleFocus)
 * Tell all securedFields some other element now has focus so they can blur themselves
 *
 * @param e -
 */
declare function touchendListener(e: Event): void;
/**
 * re. Disabling arrow keys in iOS - need to enable all fields in the form and tell SFs to disable
 *
 * NOTE: Only called when iOS detected & this.config.shouldDisableIOSArrowKeys = true
 */
declare function touchstartListener(e: Event): void;
/**
 * This works with the touchend handler to allow us to catch (click) events on non-securedFields elements
 * (re. http://gravitydept.com/blog/js-click-event-bubbling-on-ios - events don't bubble unless the click takes place on a link or input)
 *
 * We can use this event to:
 * 1. Set focus on these other elements, and
 * 2. Tell SecuredFields that this has happened so they can blur themselves
 * (see note in adyen-secured-fields...inputBase.js - "Blur event never fires on input field")
 *
 * NOTE: Only called when iOS detected
 */
declare function handleTouchend(): void;
declare function destroyTouchendListener(): void;
declare function destroyTouchstartListener(): void;
declare const _default: {
    touchendListener: typeof touchendListener;
    touchstartListener: typeof touchstartListener;
    handleTouchend: typeof handleTouchend;
    destroyTouchendListener: typeof destroyTouchendListener;
    destroyTouchstartListener: typeof destroyTouchstartListener;
};
export default _default;
