import { CardElement } from './Card';
import { CardElementData, CardElementProps } from './types';
declare class BancontactElement extends CardElement {
    static type: string;
    constructor(props: CardElementProps);
    protected static defaultProps: {
        brands: string[];
        onBinLookup: () => void;
        showBrandsUnderCardNumber: boolean;
        showFormInstruction: boolean;
        _disableClickToPay: boolean;
    };
    formatData(): CardElementData;
    /**
     * Now that the Bancontact (BCMC) Card component can accept a number dual branded with Visa (which requires a CVC) it has to be handled differently
     * at creation time (no automatic removing of the CVC securedField).
     * At the same time we can't treat it as a regular 'card' component - because it needs to hide the CVC field at at startup,
     * as well as show the BCMC logo in the number field and ignore any of the internal, regEx driven, brand detection.
     */
    formatProps(props: CardElementProps): {
        type: string;
        cvcPolicy: import("../internal/SecuredFields/lib/types").CVCPolicyType;
        holderNameRequired: boolean;
        hasCVC: boolean;
        billingAddressRequired: any;
        countryCode: any;
        configuration: {
            socialSecurityNumberMode: import("./types").SocialSecurityMode;
            visaSrciDpaId?: string;
            visaSrcInitiatorId?: string;
            mcSrcClientId?: string;
            mcDpaId?: string;
            merchantIdentifier?: string;
            merchantOrigin?: string;
            gatewayMerchantId?: string;
            publicKeyId?: string;
            region?: string;
            merchantName?: string;
            merchantId?: string;
            intent?: string;
            koreanAuthenticationRequired?: boolean;
            icon?: string;
            brandsConfiguration?: import("./types").CardBrandsConfiguration;
        };
        brandsConfiguration: import("./types").CardBrandsConfiguration;
        icon: string;
        installmentOptions: any;
        enableStoreDetails: boolean;
        clickToPayConfiguration: {
            disableOtpAutoFocus: boolean;
            shopperEmail: any;
            telephoneNumber: any;
            locale: string;
            merchantDisplayName?: string;
            onReady?(): void;
            onTimeout?(error: import("../internal/ClickToPay/errors/TimeoutError").default): void;
        };
        brand?: string;
        _disableClickToPay?: boolean;
        fundingSource?: "debit" | "credit";
        brands?: string[];
        showBrandsUnderCardNumber?: boolean;
        showBrandIcon?: boolean;
        showFormInstruction?: boolean;
        hideCVC?: boolean;
        hasHolderName?: boolean;
        onLoad?: (event: import("../internal/SecuredFields/lib/types").CbObjOnLoad) => void;
        onConfigSuccess?: (event: import("../internal/SecuredFields/lib/types").CbObjOnConfigSuccess) => void;
        onFieldValid?: (event: import("../internal/SecuredFields/lib/types").CbObjOnFieldValid) => void;
        onBrand?: (event: import("../internal/SecuredFields/lib/types").CbObjOnBrand) => void;
        onError?: (event: import("../internal/SecuredFields/lib/types").CbObjOnError) => void;
        onFocus?: (event: import("../internal/SecuredFields/lib/types").CbObjOnFocus) => void;
        onBinValue?: (event: import("../internal/SecuredFields/lib/types").CbObjOnBinValue) => void;
        onBinLookup?: (event: import("../internal/SecuredFields/lib/types").CbObjOnBinLookup) => void;
        environment?: string;
        session?: import("../../core/CheckoutSession/CheckoutSession").default;
        onChange?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onValid?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        beforeSubmit?: (state: any, element: import("../UIElement").UIElement<any>, actions: any) => Promise<void>;
        onSubmit?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onComplete?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onActionHandled?: (rtnObj: import("../types").ActionHandledReturnObject) => void;
        onAdditionalDetails?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onPaymentCompleted?: (result: any, element: import("../UIElement").UIElement<any>) => void;
        beforeRedirect?: (resolve: any, reject: any, redirectData: any, element: import("../UIElement").UIElement<any>) => void;
        isInstantPayment?: boolean;
        name?: string;
        amount?: import("../../types").PaymentAmount;
        secondaryAmount?: import("../../types").PaymentAmountExtended;
        showPayButton?: boolean;
        setStatusAutomatically?: boolean;
        payButton?: (options: import("../types").PayButtonFunctionProps) => import("preact").JSX.Element;
        loadingContext?: string;
        createFromAction?: (action: import("../../types").PaymentAction, props: object) => import("../UIElement").UIElement<any>;
        clientKey?: string;
        paymentMethodType?: string;
        elementRef?: any;
        i18n?: import("../../language").default;
        _parentInstance?: import("../../core/core").default;
        order?: import("../../types").Order;
        modules?: {
            srPanel?: import("../../core/Errors/SRPanel").SRPanel;
            analytics?: import("../../core/Analytics/Analytics").default;
            resources?: import("../../core/Context/Resources").Resources;
            risk?: import("../../core/RiskModule").default;
        };
        isDropin?: boolean;
    };
    onBrand: (event: any) => void;
}
export default BancontactElement;
