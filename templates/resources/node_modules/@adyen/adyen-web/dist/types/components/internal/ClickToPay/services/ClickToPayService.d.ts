import { CallbackStateSubscriber, IClickToPayService, IdentityLookupParams, ClickToPayCheckoutPayload, SchemesConfiguration, IdentityValidationData } from './types';
import { ISrcSdkLoader } from './sdks/SrcSdkLoader';
import ShopperCard from '../models/ShopperCard';
import TimeoutError from '../errors/TimeoutError';
export declare enum CtpState {
    Idle = "Idle",
    Loading = "Loading",
    ShopperIdentified = "ShopperIdentified",
    OneTimePassword = "OneTimePassword",
    Ready = "Ready",
    Login = "Login",
    NotAvailable = "NotAvailable"
}
declare class ClickToPayService implements IClickToPayService {
    private readonly sdkLoader;
    private readonly schemesConfig;
    private readonly shopperIdentity?;
    private readonly environment;
    private readonly onTimeout?;
    /**
     * Mandatory unique ID passed to all the networks (Click to Pay systems), used to track user journey
     */
    private readonly srciTransactionId;
    private sdks;
    private validationSchemeSdk;
    private stateSubscriber;
    state: CtpState;
    shopperCards: ShopperCard[];
    identityValidationData: IdentityValidationData;
    /**
     * Indicates if the shopper opted for saving cookies during the transaction
     */
    storeCookies: boolean;
    constructor(schemesConfig: SchemesConfiguration, sdkLoader: ISrcSdkLoader, environment: string, shopperIdentity?: IdentityLookupParams, onTimeout?: (error: TimeoutError) => void);
    get shopperAccountFound(): boolean;
    get schemes(): string[];
    updateStoreCookiesConsent(shouldStore: boolean): void;
    initialize(): Promise<void>;
    /**
     * Set the callback for notifying when the CtPState changes
     */
    subscribeOnStateChange(callback: CallbackStateSubscriber): void;
    /**
     * Initiates Consumer Identity validation with one Click to Pay System.
     * The Click to Pay System sends a one-time-password (OTP) to the registered email address or mobile number.
     **/
    startIdentityValidation(): Promise<void>;
    /**
     * Completes the  validation of the Shopper by evaluating the supplied OTP.
     */
    finishIdentityValidation(otpCode: string): Promise<void>;
    /**
     * This method performs checkout using the selected card
     */
    checkout(card: ShopperCard): Promise<ClickToPayCheckoutPayload>;
    /**
     * Call the 'unbindAppInstance()' method of each SRC SDK in order to remove the shopper cookies.
     * Besides, it deletes all information stored about the shopper.
     */
    logout(): Promise<void>;
    /**
     * Call the 'identityLookup()' method of each SRC SDK in order to verify if the shopper has an account.
     *
     * Based on the responses from the Click to Pay Systems, we should do the validation process using the SDK that
     * that responds faster with 'consumerPresent=true'
     */
    verifyIfShopperIsEnrolled(shopperIdentity: IdentityLookupParams): Promise<{
        isEnrolled: boolean;
    }>;
    private setState;
    private setSdkForPerformingShopperIdentityValidation;
    /**
     * Based on the given 'idToken', this method goes through each SRCi SDK and fetches the shopper
     * profile with his cards.
     */
    private getShopperProfile;
    /**
     * Calls the 'isRecognized()' method of each SRC SDK in order to verify if the shopper is
     * recognized on the device. The shopper is recognized if he/she has the Cookies stored
     * on their browser
     */
    private verifyIfShopperIsRecognized;
    private initiateSdks;
}
export default ClickToPayService;
