import { Component } from 'preact';
import { SFPProps, SFPState, SingleBrandResetObject } from './types';
import { StylesObject, CbObjOnError } from '../lib/types';
import { BinLookupResponse } from '../../../Card/types';
import { SFStateErrorObj } from '../../../Card/components/CardInput/types';
/**
 * SecuredFieldsProvider:
 * Initialises & handles the client-side part of SecuredFields
 */
declare class SecuredFieldsProvider extends Component<SFPProps, SFPState> {
    private csfLoadFailTimeout;
    private csfLoadFailTimeoutMS;
    private csfConfigFailTimeout;
    private csfConfigFailTimeoutMS;
    private numCharsInField;
    private rootNode;
    private numDateFields;
    private csf;
    private handleOnLoad;
    private handleOnConfigSuccess;
    private handleOnFieldValid;
    private handleOnAllValid;
    private handleOnBrand;
    private handleFocus;
    private handleOnError;
    private handleOnAutoComplete;
    private handleOnNoDataRequired;
    private handleOnTouchstartIOS;
    state: SFPState;
    props: any;
    private issuingCountryCode;
    constructor(props: SFPProps);
    static defaultProps: {
        type: string;
        keypadFix: boolean;
        rootNode: any;
        loadingContext: any;
        brands: any[];
        allowedDOMAccess: boolean;
        showWarnings: boolean;
        autoFocus: boolean;
        trimTrailingSeparator: boolean;
        onChange: () => void;
        onLoad: () => void;
        onConfigSuccess: () => void;
        onAllValid: () => void;
        onFieldValid: () => void;
        onBrand: () => void;
        onError: () => void;
        onBinValue: () => void;
        onFocus: () => void;
        onAutoComplete: () => void;
        styles: {};
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    private initializeCSF;
    private checkForKCPFields;
    getChildContext(): object;
    handleUnsupportedCard(errObj: CbObjOnError): boolean;
    setFocusOn(frame: string): void;
    updateStyles(stylesObj: StylesObject): void;
    sfIsOptionalOrHidden(fieldType: string): boolean;
    destroy(): void;
    showValidation(): void;
    /**
     * Map SF errors to ValidationRuleResult-like objects, for CardInput component
     */
    mapErrorsToValidationRuleResult(): SFStateErrorObj;
    processBinLookupResponse(binLookupResponse: BinLookupResponse, resetObject: SingleBrandResetObject): void;
    private setRootNode;
    render(props: any, state: any): any;
}
export default SecuredFieldsProvider;
