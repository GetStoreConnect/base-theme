import { CustomSdkConfiguration, SrcCheckoutParams, SrciCheckoutResponse, SrciCompleteIdentityValidationResponse, SrcIdentityLookupParams, SrciIdentityLookupResponse, SrciInitiateIdentityValidationResponse, SrciIsRecognizedResponse, SrcInitParams, SrcProfile } from './types';
import { ClickToPayScheme } from '../../types';
export interface ISrcInitiator {
    schemeName: ClickToPayScheme;
    loadSdkScript(): Promise<void>;
    removeSdkScript(): void;
    init(params: SrcInitParams, srciTransactionId: string): Promise<void>;
    isRecognized(): Promise<SrciIsRecognizedResponse>;
    identityLookup(params: SrcIdentityLookupParams): Promise<SrciIdentityLookupResponse>;
    initiateIdentityValidation(): Promise<SrciInitiateIdentityValidationResponse>;
    completeIdentityValidation(validationData: string): Promise<SrciCompleteIdentityValidationResponse>;
    getSrcProfile(idTokens: string[]): Promise<SrcProfile>;
    checkout(params: SrcCheckoutParams): Promise<SrciCheckoutResponse>;
    unbindAppInstance(): Promise<void>;
}
export default abstract class AbstractSrcInitiator implements ISrcInitiator {
    schemeSdk: any;
    abstract readonly schemeName: ClickToPayScheme;
    protected readonly customSdkConfiguration: CustomSdkConfiguration;
    private readonly sdkUrl;
    private scriptElement;
    protected constructor(sdkUrl: string, customSdkConfiguration: CustomSdkConfiguration);
    loadSdkScript(): Promise<void>;
    removeSdkScript(): void;
    /**
     * Verifies if SDK is already loaded on the window object.
     * Example: Merchant can preload the SDK to speed up the loading time
     */
    protected abstract isSdkIsAvailableOnWindow(): boolean;
    /**
     * Assign SchemeSDK object to 'schemeSdk' property.
     * Each scheme creates its own object reference on 'window' using different naming,
     * therefore this method should be implemented by the subclass to assign the property
     * accordingly
     */
    protected abstract assignSdkReference(): void;
    /**
     * Initializes the app with common state. The init method must be called before any other methods.
     */
    abstract init(params: SrcInitParams, srciTransactionId: string): Promise<void>;
    /**
     * This method performs checkout using the specified card. If successful, the
     * response contains summary checkout information.
     */
    checkout(params: SrcCheckoutParams): Promise<SrciCheckoutResponse>;
    /**
     * This method disassociates the Consumer application / Consumer Device from the Consumer’s SRC Profile.
     */
    unbindAppInstance(): Promise<void>;
    /**
     * Determines whether the consumer is recognized, e.g. by detecting the presence of a local cookie in
     * the browser environment.
     */
    isRecognized(): Promise<SrciIsRecognizedResponse>;
    /**
     * Sends a validation code to the specified consumer.
     * This method sends a one-time password (OTP) to the consumer to start validation
     */
    initiateIdentityValidation(): Promise<SrciInitiateIdentityValidationResponse>;
    /**
     * Obtains the masked card and other account profile data associated with the userId.
     */
    getSrcProfile(idTokens: string[]): Promise<SrcProfile>;
    /**
     * Obtains the user account associated with the consumer’s identity (an email address or phone
     * number).
     */
    abstract identityLookup(params: SrcIdentityLookupParams): Promise<SrciIdentityLookupResponse>;
    /**
     * This method completes the identity validation by receiving the one-time password (OTP) sent to the
     * consumer to start validation.
     */
    abstract completeIdentityValidation(otp: string): Promise<SrciCompleteIdentityValidationResponse>;
}
