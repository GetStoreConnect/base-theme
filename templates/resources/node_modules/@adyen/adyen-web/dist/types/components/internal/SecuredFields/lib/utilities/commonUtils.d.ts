/**
 * Checks if `prop` is classified as an `Array` primitive or object.
 * @internal
 * @param prop - The value to check.
 * @returns Returns `true` if `prop` is correctly classified, else `false`.
 * @example
 * ```
 * isArray([1, 2, 3]);
 * // => true
 *
 * isArray(1);
 * // => false
 * ```
 */
export declare function isArray(prop: any): boolean;
/**
 * Generate random number using window.crypto if available - otherwise fall back toMath.random
 *
 * @returns Number
 */
export declare function generateRandomNumber(): number;
/**
 * wait
 *
 * Generic, Promise based, setTimeout call
 *
 * ms : Number - timeout value in milliseconds
 *
 * @example
 * ```
 * wait(5000).then(() => { runMyFunction() } ).catch(() => console.log('error with the timeout'));
 * ```
 */
/**
 * The function existy is meant to define the existence of something.
 * Using the loose inequality operator (!=), it is possible to distinguish between null, undefined, and everything else.
 * @internal
 * @param x -
 * @returns
 */
export declare function existy(x: any): boolean;
/**
 * Used to determine if something should be considered a synonym for true
 * NOTE: The number zero is considered “truthy” by design as is '' & `{}`.
 * If you wish to retain the behavior where 0 is a synonym for false, then do not use truthy where you might expect 0
 * So - returns true if something is not false, undefined or null
 * @internal
 * @param x -
 * @returns
 */
export declare function truthy(x: any): boolean;
/**
 * Recursively compare 2 objects
 */
export declare function objectsDeepEqual(x: any, y: any): any;
/**
 * Returns true if x is:
 * null, undefined, false, 0, NaN, empty object or array, empty string
 * @param x -
 * @example
 * ```
 * falsy(0) // => true
 * falsy('') // => true
 * falsy({}) // => true
 * falsy([]) // => true
 * falsy(false) // => true
 * falsy(NaN) // => true
 * falsy(null) // => true
 * falsy(undefined) // => true
 *
 * falsy(1) // => false
 * falsy('d') // => false
 * falsy({type:"kin"}) // => false
 * falsy([6]) // => false
 * falsy(true) // => false
 * ```
 */
export declare function falsy(x: any): boolean;
/**
 * Inverse of falsy - returns true if x is NOT null, undefined, false, 0, NaN, empty object or array, empty string
 * @param x -
 */
export declare function notFalsy(x: any): boolean;
/**
 * This function allows us to partially apply any number of variables to functions that take any number of parameters.
 * @returns \{function(): *\}
 */
export declare function partial(...args: any[]): (...args2: any[]) => any;
