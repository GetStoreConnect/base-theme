import { SortErrorsObj, SortedErrorObject, SetSRMessagesReturnObject } from './types';
/**
 * Access items stored in the ERROR_CODES object by either sending in the key - in which case you get the value
 * or by sending in the value - in which case you get the key
 * @param keyOrValue - key (or value) by which to retrieve the corresponding value (or key)
 */
export declare const getError: (keyOrValue: string) => string;
export declare const addAriaErrorTranslationsObject: (i18n: any) => {};
/**
 * Adds a new error property to an object, unless it already exists.
 * This error property is an object containing the translated errors, stored by code, that relate to the securedFields
 * @param originalObject - object we want to duplicate and enhance
 * @param i18n - an i18n object to use to get translations
 * @returns a duplicate of the original object with a new property: "error" whose value is a object containing the translated errors
 */
export declare const addErrorTranslationsToObject: (originalObj: any, i18n: any) => any;
/**
 * sortErrorsByLayout - takes a list of errors and a layout, and returns a sorted array of error objects with translated error messages
 *
 * @param errors - an object containing errors, referenced by field type
 * @param layout - a string[] controlling how the output error objects will be ordered. Required when it is known that the way the error object is populated can vary e.g. Card comp, &/or anything with a country selector
 * @param i18n - our internal Language mechanism
 * @param countrySpecificLabels - some errors are region specific, e.g. in the US "postal code" = "zip code", so map the fieldType value accordingly (if it is being added to the errorMessage string)
 * @param fieldTypeMappingFn - a component specific lookup function that will tell us both if we need to prepend the field type to the SR panel message, and, if so, will retrieve the correct translation for the field type
 */
export declare const sortErrorsByLayout: ({ errors, i18n, layout, countrySpecificLabels, fieldTypeMappingFn }: SortErrorsObj) => SortedErrorObject[];
/**
 * Implemented as a partial, with an object containing the first 6 arguments; then the final argument, errors, is passed to the partial
 *
 * NOTE: using this generic error setting fny is only suitable when errors for the SRPanel are *only* generated by showValidation().
 * When errors are also generated onBlur, as the user leaves the input, the SR message generation becomes more complex - see CardInput as an example
 */
export declare const setSRMessagesFromErrors: ({ i18n, fieldTypeMappingFn, SRPanelRef }: {
    i18n: any;
    fieldTypeMappingFn: any;
    SRPanelRef: any;
}, { errors, isValidating, layout, countrySpecificLabels }: {
    errors: any;
    isValidating: any;
    layout: any;
    countrySpecificLabels: any;
}) => SetSRMessagesReturnObject;
export declare const enhanceErrorObjectKeys: (errorObj: any, keyPrefix: any) => {};
