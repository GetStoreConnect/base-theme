import { CheckoutSession, CheckoutSessionBalanceResponse, CheckoutSessionDetailsResponse, CheckoutSessionOrdersResponse, CheckoutSessionPaymentResponse, CheckoutSessionSetupResponse, SessionConfiguration } from '../../types';
import { onOrderCancelData } from '../../components/Dropin/types';
declare class Session {
    private readonly session;
    private readonly storage;
    readonly clientKey: string;
    readonly loadingContext: string;
    configuration: SessionConfiguration;
    constructor(rawSession: CheckoutSession, clientKey: string, loadingContext: string);
    get id(): string;
    get data(): string;
    /**
     * Updates the session.data with the latest data blob
     */
    private updateSessionData;
    /**
     * Fetches data from a session
     */
    setupSession(options: any): Promise<CheckoutSessionSetupResponse>;
    /**
     * Submits a session payment
     */
    submitPayment(data: any): Promise<CheckoutSessionPaymentResponse>;
    /**
     * Submits session payment additional details
     */
    submitDetails(data: any): Promise<CheckoutSessionDetailsResponse>;
    /**
     * Checks the balance for a payment method
     */
    checkBalance(data: any): Promise<CheckoutSessionBalanceResponse>;
    /**
     * Creates an order for the current session
     */
    createOrder(): Promise<CheckoutSessionOrdersResponse>;
    /**
     * Cancels an order for the current session
     */
    cancelOrder(data: onOrderCancelData): Promise<CheckoutSessionOrdersResponse>;
    /**
     * Gets the stored session but only if the current id and the stored id match
     */
    getStoredSession(): CheckoutSession;
    /**
     * Stores the session
     */
    storeSession(): void;
    /**
     * Clears the stored session
     */
    removeStoredSession(): void;
}
export default Session;
